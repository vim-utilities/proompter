#!/usr/bin/env vim
" vim: expandtab

" if exists('g:proompter__loaded') || v:version < 700
"   finish
" endif
" let g:proompter__loaded = 1

""
" Configurations that may be overwritten
" Type: define__configurations
let s:defaults = {
      \   'select': {
      \     'model_name': 'codellama',
      \   },
      \   'api': {
      \     'url': 'http://127.0.0.1:11434/api/generate',
      \   },
      \   'channel': {
      \     'address': '127.0.0.1:11435',
      \     'options': {
      \       'mode': 'raw',
      \       'callback': v:null,
      \     },
      \   },
      \   'models': {
      \     'codellama': {
      \       'data': {
      \         'prompt': '',
      \         'raw': v:false,
      \         'stream': v:true,
      \       },
      \     },
      \   },
      \ }

let b:proompter_state = {
      \  'channel': v:null,
      \  'responses': [],
      \ }

""
" Type Definition: {dictionary} define__configurations
" Property: {string} select.model_name - 
" Property: {string} api.url - Where channel proxy will forward requests to
" Property: {string} channel.address - See: {docs} :help channel-address
" Property: {string} channel.options - See: {docs} :help channel-open-options
" Property: {string} channel.options.mode - See: {docs} :help channel-mode
" Property: {function} channel.options.callback - See: {docs} :help channel-callback


""
" Merged dictionaries without mutation
" Parameter: {dict} defaults - Dictionary of default key/value pares
" Parameter: {...dict[]} override - Up to 20 dictionaries to merge into return
" Return: {dict}
" See: {docs} :help type()
" See: {link} https://vi.stackexchange.com/questions/20842/how-can-i-merge-two-dictionaries-in-vim
function s:Dict_Merge(defaults, ...) abort
  let l:new = copy(a:defaults)
  if a:0 == 0
    return l:new
  endif

  for l:override in a:000
    for [l:key, l:value] in items(l:override)
      if type(l:value) == type({}) && type(get(l:new, l:key)) == type({})
        let l:new[l:key] = s:Dict_Merge(l:new[l:key], l:value)
      else
        let l:new[l:key] = l:value
      endif
    endfor
  endfor

  return l:new
endfunction

""
" Merge customization with defaults
" See: {docs} :help fnamemodify()
" See: {docs} :help readfile()
" See: {docs} :help json_decode()
if exists('g:proompter')
  if type(g:proompter) == type('') && fnamemodify(g:proompter, ':e') == 'json'
    let g:proompter = json_decode(join(readfile(g:proompter), ''))
  endif

  if type(g:proompter) == type({})
    let g:proompter = s:Dict_Merge(s:defaults, g:proompter)
  else
    let g:proompter = deepcopy(s:defaults)
  endif
else
  let g:proompter = deepcopy(s:defaults)
endif
  let g:proompter = deepcopy(s:defaults)
" TODO: Remove above line after R&D and testing

""
" Register insert remapping after &filetype is defined
" autocmd BufWinEnter * :call s:Register_Insert_Remapping()


""
" Decode `value` as serialized JSON and return the "response" member
"
" See: {docs} :help map()
" Parameter: {never} _key - Ingored
" Parameter: {string} value - Serialized JSON string with top-level "response"
function! Proompter__MapExtractResponse(_key, value) abort
  let l:data = json_decode(a:value)
  return l:data.response
endfunction

""
" Handle HTTP response from channel proxied API
"
" Parameter: {string} channel_response - Status reported by Vim, eg. 'channel 529 closed'
" Parameter: {string} api_response - HTTP response with the following _shape_
"
" ```
" HTTP/1.0 200 OK
" Server: SimpleHTTP/0.6 Python/3.12.6
" Date: Fri, 20 Sep 2024 23:25:06 GMT
" Content-Type: application/json
"
" {"model":"codellama","created_at":"2024-09-20T23:25:01.01645329Z","response":"V","done":false}
" {"model":"codellama","created_at":"2024-09-20T23:25:01.177902785Z","response":"im","done":false}
" {"model":"codellama","created_at":"2024-09-20T23:25:01.341776729Z","response":" is","done":false}
" {"model":"codellama","created_at":"2024-09-20T23:25:01.506237509Z","response":" the","done":false}
" {"model":"codellama","created_at":"2024-09-20T23:25:01.670272033Z","response":" best","done":false}
" ...
" {"model":"codellama","created_at":"2024-09-20T23:25:06.675058548Z","response":"","done":true,"done_reason":"stop","context":[...],"total_duration":7833808817,"load_duration":10021098,"prompt_eval_count":31,"prompt_eval_duration":2122796000,"eval_count":35,"eval_duration":5658536000}
" ```
function! s:Proompter__Callback(channel_response, api_response, ...) abort
  let l:response_parts = split(a:api_response, '\r\n\r\n')
  let l:response_headers = l:response_parts[0]
  let l:response_body = join(l:response_parts[1:])

  let l:data = {
        \   'headers': l:response_headers,
        \   'body': l:response_body,
        \   'text': join(map(split(l:response_body, '\n'), function('Proompter__MapExtractResponse')), ''),
        \ }

  call add(b:proompter_state.responses, l:data)
endfunction

""
" Set `b:proompter_state.channel` if not already defined then return result of `ch_open(...)`
"
" Throw: when `b:proompter_state.channel` is in a non-"open" state
"
" Note: Will attempt to re-open channel if state is "closed"
function! s:Proompter__GetOrSetOpenChannel() abort
  if b:proompter_state.channel == v:null || ch_status(b:proompter_state.channel) == 'closed'
    let l:channel_options = deepcopy(g:proompter.channel.options)
    if !l:channel_options.callback
      let l:channel_options.callback = function('s:Proompter__Callback')
    endif
    let b:proompter_state.channel = ch_open(g:proompter.channel.address, l:channel_options)
  endif

  let l:channel_status = ch_status(b:proompter_state.channel)
  if l:channel_status == 'fail'
    throw 'Proompter: Failed to setup channel'
  elseif l:channel_status == 'buffered'
    throw 'Proompter: Channel cannot be written to'
  elseif l:channel_status == 'closed'
    throw 'Proompter: Channel is closed'
  endif

  return b:proompter_state.channel
endfunction

""
" Craft HTTP POST with `data` encoded as JSON in body and path pointing to API
"
" Parameter: {dict} data - Body payload that will be POST-ed
function! Proompter__FormatPost(data) abort
  let l:json = json_encode(a:data)

  return join([
        \   'POST ' . g:proompter.api.url . ' HTTP/1.1',
        \   'Host: ' . g:proompter.channel.address,
        \   'Content-Type: application/json',
        \   'Content-Length: ' . strlen(l:json),
        \   '',
        \   l:json,
        \ ], "\r\n")
endfunction

""
" Parameter: {string} value - What will eventually be sent to LLM
"
" Throw: when `value` is empty or zero length
"
" Note: `g:proompter.models[g:proompter.select.model_name].data.prompt`
" is prepended to `value` before being sent to LLM at `g:proompter.api.url`
" via channel proxy
"
" Note: without the slicing output of `shellescape` the append/prepend-ed
" single-quotes which ain't gonna be good within a larger JSON object
function! Proompter__SendPrompt(value) abort
  if len(a:value) == 0
    throw 'Proompter: empty input value'
  endif

  let l:model_name = g:proompter.select.model_name
  let l:model_data = deepcopy(g:proompter.models[l:model_name].data)
  let l:model_data.prompt .= shellescape(a:value)[1:-2]
  let l:model_data.model = l:model_name

  let l:post_payload = Proompter__FormatPost(l:model_data)

  let l:channel = s:Proompter__GetOrSetOpenChannel()

  ch_sendraw(l:channel, l:post_payload)
endfunction

""
" See: {docs} :help map()
"
" Parameter: {never} _key - Ignored
" Parameter: {string} value - Text that will destined to be sent to LLM
"
" Note: without the slicing output of `shellescape` the append/prepend-ed
" single-quotes which ain't gonna be good within a larger JSON object
function! s:Proompter__MapShellEscape(_key, value)
  return shellescape(a:value)[1:-2]
endfunction

""
" Throw: selection is zero length
function! Proompter__SendHightlightedText()
  let l:selection = getline(getpos("'<")[1], getpos("'>")[1])
  if len(l:selection) == 1 && len(l:selection[0]) == 0
    throw 'Proompter: empty input value'
  endif

  let l:model_name = g:proompter.select.model_name
  let l:model_data = deepcopy(g:proompter.models[l:model_name].data)
  let l:model_data.prompt .= join(map(l:selection, function('s:Proompter__MapShellEscape')), '\n')
  let l:model_data.model = l:model_name

  let l:post_payload = Proompter__FormatPost(l:model_data)

  let l:channel = s:Proompter__GetOrSetOpenChannel()

  ch_sendraw(l:channel, l:post_payload)
endfunction


""
" Registers Insert mode re-mapping
" See: {docs} :help :map-<buffer>
" function! s:Register_Insert_Remapping() abort
"   let l:exclude_file_types = get(g:proompter, 'exclude', [])
"   if count(l:exclude_file_types, &filetype)
"     return
"   endif

"   let l:configurations_entry = get(g:proompter, &filetype, {})
"   let l:configurations_entry = s:Dict_Merge(g:proompter['all'], l:configurations_entry)
" endfunction
