
""
" {{{
Execute (proompter#parse#HeadersFromHTTPResponse -- Well formatted HTTP response):
  let separator = "\r\n"

  let data_lines = [
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: Sat, 28 Sep 2024 23:29:00 GMT',
        \   'Content-Type: application/json',
        \   '',
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]

  let headers = proompter#parse#HeadersFromHTTPResponse(join(data_lines, separator))
  AssertEqual headers.Server, 'SimpleHTTP/0.6 Python/3.12.6'
  AssertEqual headers.Date, 'Sat, 28 Sep 2024 23:29:00 GMT'
  AssertEqual headers['Content-Type'], 'application/json'

Execute (proompter#parse#HeadersFromHTTPResponse -- Missing blank line separations):
  let separator = "\r\n"

  let data_lines = [
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: Sat, 28 Sep 2024 23:29:00 GMT',
        \   'Content-Type: application/json',
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]

  let headers = proompter#parse#HeadersFromHTTPResponse(join(data_lines, separator))
  AssertEqual headers.Server, 'SimpleHTTP/0.6 Python/3.12.6'
  AssertEqual headers.Date, 'Sat, 28 Sep 2024 23:29:00 GMT'
  AssertEqual headers['Content-Type'], 'application/json'

Execute (proompter#parse#HeadersFromHTTPResponse -- JSON at end of last header):
  let separator = "\r\n"

  let data_lines = [
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: Sat, 28 Sep 2024 23:29:00 GMT',
        \   'Content-Type: application/json{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]

  let headers = proompter#parse#HeadersFromHTTPResponse(join(data_lines, separator))
  AssertEqual headers.Server, 'SimpleHTTP/0.6 Python/3.12.6'
  AssertEqual headers.Date, 'Sat, 28 Sep 2024 23:29:00 GMT'
  AssertEqual headers['Content-Type'], 'application/json'

Execute (proompter#parse#HeadersFromHTTPResponse -- No headers with a body):
  let separator = "\r\n"

  let data_lines = [
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]

  let headers = proompter#parse#HeadersFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(headers), 0

Execute (proompter#parse#HeadersFromHTTPResponse -- No headers and no body):
  let separator = "\r\n"

  let data_lines = []

  let headers = proompter#parse#HeadersFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(headers), 0
" }}}
""

""
" {{{
Execute (proompter#parse#JSONLinesFromHTTPResponse -- Well formatted HTTP response):
  let separator = "\r\n"

  let data_lines = [
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: Sat, 28 Sep 2024 23:29:00 GMT',
        \   'Content-Type: application/json',
        \   '',
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]


  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), 1
  AssertEqual dictionary_list[0].model, 'codellama'
  AssertEqual dictionary_list[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual dictionary_list[0].response, ' V'
  AssertEqual dictionary_list[0].done, v:false

Execute (proompter#parse#JSONLinesFromHTTPResponse -- Missing blank line separations):
  let separator = "\r\n"

  let data_lines = [
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: Sat, 28 Sep 2024 23:29:00 GMT',
        \   'Content-Type: application/json',
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]


  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), 1
  AssertEqual dictionary_list[0].model, 'codellama'
  AssertEqual dictionary_list[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual dictionary_list[0].response, ' V'
  AssertEqual dictionary_list[0].done, v:false

Execute (proompter#parse#JSONLinesFromHTTPResponse -- JSON at end of last header):
  let separator = "\r\n"

  let data_lines = [
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: Sat, 28 Sep 2024 23:29:00 GMT',
        \   'Content-Type: application/json{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]

  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), 1
  AssertEqual dictionary_list[0].model, 'codellama'
  AssertEqual dictionary_list[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual dictionary_list[0].response, ' V'
  AssertEqual dictionary_list[0].done, v:false

Execute (proompter#parse#JSONLinesFromHTTPResponse -- No headers with a body):
  let separator = "\r\n"

  let data_lines = [
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]

  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), 1
  AssertEqual dictionary_list[0].model, 'codellama'
  AssertEqual dictionary_list[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual dictionary_list[0].response, ' V'
  AssertEqual dictionary_list[0].done, v:false

Execute (proompter#parse#JSONLinesFromHTTPResponse -- No headers with a body):
  let separator = "\r\n"

  let data_lines = []

  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), 0

Execute (proompter#parse#JSONLinesFromHTTPResponse -- No headers with a body of multiple JSON lines):
  let separator = "\r\n"

  let data_lines = [
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.177902785Z","response":"im","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.341776729Z","response":" is","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.506237509Z","response":" the","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.670272033Z","response":" best","done":true}',
        \ ]

  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), len(data_lines)

  AssertEqual dictionary_list[0].model, 'codellama'
  AssertEqual dictionary_list[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual dictionary_list[0].response, ' V'
  AssertEqual dictionary_list[0].done, v:false

  AssertEqual dictionary_list[-1].model, 'codellama'
  AssertEqual dictionary_list[-1].created_at, '2024-09-20T23:25:01.670272033Z'
  AssertEqual dictionary_list[-1].response, ' best'
  AssertEqual dictionary_list[-1].done, v:true

Execute (proompter#parse#JSONLinesFromHTTPResponse -- No headers with dicts that touch):
  let separator = ""

  let data_lines = [
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.177902785Z","response":"im","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.341776729Z","response":" is","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.506237509Z","response":" the","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.670272033Z","response":" best","done":true}',
        \ ]

  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), len(data_lines)

  AssertEqual dictionary_list[0].model, 'codellama'
  AssertEqual dictionary_list[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual dictionary_list[0].response, ' V'
  AssertEqual dictionary_list[0].done, v:false

  AssertEqual dictionary_list[-1].model, 'codellama'
  AssertEqual dictionary_list[-1].created_at, '2024-09-20T23:25:01.670272033Z'
  AssertEqual dictionary_list[-1].response, ' best'
  AssertEqual dictionary_list[-1].done, v:true

Execute (proompter#parse#JSONLinesFromHTTPResponse -- No headers with dicts that touch and curly response):
  let separator = ""

  let data_lines = [
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" {","done":false}',
        \   '{"model":"codellama","created_at":"2024-09-20T23:25:01.670272033Z","response":" \"foo","done":true}',
        \ ]

  let dictionary_list = proompter#parse#JSONLinesFromHTTPResponse(join(data_lines, separator))
  AssertEqual len(dictionary_list), len(data_lines)

  AssertEqual dictionary_list[0].model, 'codellama'
  AssertEqual dictionary_list[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual dictionary_list[0].response, ' {'
  AssertEqual dictionary_list[0].done, v:false

  AssertEqual dictionary_list[-1].model, 'codellama'
  AssertEqual dictionary_list[-1].created_at, '2024-09-20T23:25:01.670272033Z'
  AssertEqual dictionary_list[-1].response, ' "foo'
  AssertEqual dictionary_list[-1].done, v:true
" }}}
""

""
" {{{
Execute (proompter#parse#HTTPResponse -- Well formatted HTTP response):
  let separator = "\r\n"

  let data_lines = [
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: Sat, 28 Sep 2024 23:29:00 GMT',
        \   'Content-Type: application/json',
        \   '',
        \   '{"model": "codellama","created_at":"2024-09-28T23:29:00.299380014Z","response":" V","done":false}',
        \ ]


  let http_response = proompter#parse#HTTPResponse(join(data_lines, separator))
  AssertEqual http_response.headers.Server, 'SimpleHTTP/0.6 Python/3.12.6'
  AssertEqual http_response.headers.Date, 'Sat, 28 Sep 2024 23:29:00 GMT'
  AssertEqual http_response.headers['Content-Type'], 'application/json'

  AssertEqual len(http_response.body), 1
  AssertEqual http_response.body[0].model, 'codellama'
  AssertEqual http_response.body[0].created_at, '2024-09-28T23:29:00.299380014Z'
  AssertEqual http_response.body[0].response, ' V'
  AssertEqual http_response.body[0].done, v:false
" }}}
""

""
" {{{
Execute (proompter#parse#MessageOrResponseFromAPI -- Detects and normaizes data from "/generate"):
  let data = {
        \   'model': 'llama3.2',
        \   'created_at': '2023-08-04T08:52:19.385406455-07:00',
        \   'response': 'The',
        \   'done': v:false,
        \ }

  let expected = {
        \   'model': 'llama3.2',
        \   'created_at': '2023-08-04T08:52:19.385406455-07:00',
        \   'message': {
        \     'role': 'assistant',
        \     'content': 'The',
        \     'images': v:null,
        \   },
        \   'done': v:false,
        \   'done_reason': v:null,
        \ }

  let api_response = proompter#parse#MessageOrResponseFromAPI(data)
  AssertEqual api_response, expected

Execute (proompter#parse#MessageOrResponseFromAPI -- Detects and normaizes data from "/chat"):
  let data = {
        \   'model': 'llama3.2',
        \   'created_at': '2023-08-04T08:52:19.385406455-07:00',
        \   'message': {
        \     'role': 'assistant',
        \     'content': 'The',
        \     'images': v:null
        \   },
        \   'done': v:false,
        \ }

  let expected = {
        \   'model': 'llama3.2',
        \   'created_at': '2023-08-04T08:52:19.385406455-07:00',
        \   'message': {
        \     'role': 'assistant',
        \     'content': 'The',
        \     'images': v:null,
        \   },
        \   'done': v:false,
        \   'done_reason': v:null,
        \ }

  let api_response = proompter#parse#MessageOrResponseFromAPI(data)
  AssertEqual api_response, expected
" }}}
""

