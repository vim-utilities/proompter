
""
" {{{
Execute (proompter#Unload -- Is okay about '/api/chat' endpoint):
  let response_data = [
        \   {
        \     'model': 'codellama',
        \     'created_at': '2024-09-28T23:29:04.299380014Z',
        \     'message': {
        \       'role': 'assistant',
        \       'content': '',
        \     },
        \     'done_reason': 'unload',
        \     'done': v:true,
        \     'TODO': 'REMOVE FORCED PADDING',
        \   }
        \ ]

  let base64_encoded_response = proompter#base64#EncodeString(join([
        \   'HTTP/1.1 200 OK',
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: ' . strftime('%a, %d %b %Y %T GMT'),
        \   'Content-Type: application/json',
        \   '',
        \   join(mapnew(response_data, { _index, entry -> proompter#json#Stringify(entry) }), "\r\n"),
        \ ], "\r\n"))

  let configurations = {
        \   'select': {
        \     'model_name': 'codellama',
        \     'completion_endpoint': 'chat',
        \   },
        \   'api': {
        \     'url': 'http://127.0.0.1:11434?response=' . base64_encoded_response,
        \   },
        \   'channel': {
        \     'address': '127.0.0.1:41968',
        \     'options': {
        \       'mode': 'raw',
        \       'callback': v:null,
        \     },
        \   },
        \ }

  let state = {
        \   'messages': [],
        \   'channel': v:null,
        \ }

  let expected_configurations = deepcopy(configurations)

  let expected_entries = deepcopy(response_data)
  call remove(expected_entries[0], 'TODO')
  let expected_entries[0].context = v:null
  let expected_entries[0].message.images = v:null
  let expected_entries[0].message.tool_calls = v:null

  let expected_state = deepcopy(state)
  call extend(expected_state.messages, deepcopy(expected_entries))

  try
    call proompter#Unload(
          \   configurations,
          \   state,
          \ )

    sleep 100m
  catch
    echow 'v:exception ->' v:exception
  finally
    if ch_info(state.channel).status != 'closed'
      call ch_close(state.channel)
    endif
  endtry

  AssertEqual state.messages[-1], expected_state.messages[-1]

  AssertEqual configurations, expected_configurations, 'Unexpected mutation of configurations'

Execute (proompter#Unload -- Is okay about '/api/generate' endpoint):
  let response_data = [
        \   {
        \     'model': 'codellama',
        \     'created_at': '2024-09-28T23:29:04.299380014Z',
        \     'response': '',
        \     'done': v:true,
        \     'done_reason': 'unload',
        \     'TODO': 'REMOVE THIS AFTER SORTING OUT ISSUES',
        \   }
        \ ]


  let base64_encoded_response = proompter#base64#EncodeString(join([
        \   'HTTP/1.1 200 OK',
        \   'Server: SimpleHTTP/0.6 Python/3.12.6',
        \   'Date: ' . strftime('%a, %d %b %Y %T GMT'),
        \   'Content-Type: application/json',
        \   '',
        \   join(mapnew(response_data, { _index, entry -> proompter#json#Stringify(entry) }), "\r\n"),
        \ ], "\r\n"))

  let configurations = {
        \   'select': {
        \     'model_name': 'codellama',
        \     'completion_endpoint': 'chat',
        \   },
        \   'api': {
        \     'url': 'http://127.0.0.1:11434/api/chat?response=' . base64_encoded_response,
        \   },
        \   'channel': {
        \     'address': '127.0.0.1:41968',
        \     'options': {
        \       'mode': 'raw',
        \       'callback': v:null,
        \     },
        \   },
        \ }

  let state = {
        \   'messages': [],
        \   'channel': v:null,
        \ }

  let expected_configurations = deepcopy(configurations)

  let expected_entry = {
        \   'model': response_data[-1].model,
        \   'created_at': response_data[-1].created_at,
        \   'message': {
        \     'role': 'assistant',
        \     'content': '',
        \     'images': v:null,
        \     'tool_calls': v:null,
        \   },
        \   'context': v:null,
        \   'done': response_data[-1].done,
        \   'done_reason': response_data[-1].done_reason,
        \ }

  let expected_state = deepcopy(state)
  call add(expected_state.messages, deepcopy(expected_entry))

  try
    call proompter#Unload(
          \   configurations,
          \   state,
          \ )

    sleep 100m
  catch
    echow 'v:exception ->' v:exception
  finally
    if ch_info(state.channel).status != 'closed'
      call ch_close(state.channel)
    endif
  endtry

  AssertEqual state.messages[-1], expected_state.messages[-1]

  AssertEqual configurations, expected_configurations, 'Unexpected mutation of configurations'
" }}}
""
